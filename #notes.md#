# This lesson is about using git

Initialize git:


```shell
git init
```

Check the overall status of the project:

```shell
bash status
```

Add a file to the stagin area:

```shell
git add chapter1.txt
```

Commit changes with a message

```shell
git commit -m "message in present tense"
```

Check what was done:

```shell
git log
```

After creating files `chapter2.txt` and `chapter3.txt`:

Commit all non-staged files in the directory:

```shell
git add .
```
Commit the new changes:

```shell
git commit -m "complete chapters 2 and 3"
```

And check that everything worked:

```shell
git log
```

Suppose I mess chapter 3 because I felt asleep in my keyboard.

Check the differences:

```shell
git diff chapter3.txt 
```

Restore `chapter3.txt` to the previous version that was commited:

```shell
git checkout chapter3.txt 
```

I just created a dummy repo in github, so I can use it as a remote for my local git:

```shell
git remote add origin https://github.com/PavoDive/day70_git.git
git branch -M main
```

Now I can push my local work to github:

```shell
git push -u origin main
```

## Ignoring files

Imagine I have a file with some secret keys or passwords `secrets.txt`. I can avoid git tracking it by adding its name to a special file called `.gitignore`. This file accepts comments (lines starting with #) and wildcards.

I will create another file, say `chapter4.txt` to demonstrate the value of `.gitignore`.

Github has a very interesting repo called "gitignore" with many example templates of gitignore files.



